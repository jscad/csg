const test = require('ava')

const geom3 = require('../geometry/geom3')

const {cylinderElliptic} = require('./index')

const comparePolygonsAsPoints = require('../../test/helpers/comparePolygonsAsPoints')

test('cylinderElliptic (defaults)', t => {
  const obs = cylinderElliptic()
  const pts = geom3.toPoints(obs)
  const exp = [
    [[0, -1, 0], [1, -1, 0], [0.8660253882408142, -1, 0.5] ],
    [[0.8660253882408142, -1, 0.5], [1, -1, 0], [1, 1, 0], [0.8660253882408142, 1, 0.5] ],
    [[0, 1, 0], [0.8660253882408142, 1, 0.5], [1, 1, 0] ],
    [[0, -1, 0], [0.8660253882408142, -1, 0.5], [0.5, -1, 0.8660253882408142] ],
    [[0.5, -1, 0.8660253882408142], [0.8660253882408142, -1, 0.5],
     [0.8660253882408142, 1, 0.5], [0.5, 1, 0.8660253882408142] ],
    [[0, 1, 0], [0.5, 1, 0.8660253882408142], [0.8660253882408142, 1, 0.5] ],
    [[0, -1, 0], [0.5, -1, 0.8660253882408142], [6.123234262925839e-17, -1, 1] ],
    [[6.123234262925839e-17, -1, 1], [0.5, -1, 0.8660253882408142],
     [0.5, 1, 0.8660253882408142], [6.123234262925839e-17, 1, 1] ],
    [[0, 1, 0], [6.123234262925839e-17, 1, 1], [0.5, 1, 0.8660253882408142] ],
    [[0, -1, 0], [6.123234262925839e-17, -1, 1], [-0.5, -1, 0.8660253882408142] ],
    [[-0.5, -1, 0.8660253882408142], [6.123234262925839e-17, -1, 1],
     [6.123234262925839e-17, 1, 1], [-0.5, 1, 0.8660253882408142] ],
    [[0, 1, 0], [-0.5, 1, 0.8660253882408142], [6.123234262925839e-17, 1, 1] ],
    [[0, -1, 0], [-0.5, -1, 0.8660253882408142], [-0.8660253882408142, -1, 0.5] ],
    [[-0.8660253882408142, -1, 0.5], [-0.5, -1, 0.8660253882408142],
     [-0.5, 1, 0.8660253882408142], [-0.8660253882408142, 1, 0.5] ],
    [[0, 1, 0], [-0.8660253882408142, 1, 0.5], [-0.5, 1, 0.8660253882408142] ],
    [[0, -1, 0], [-0.8660253882408142, -1, 0.5], [-1, -1, 1.2246468525851679e-16] ],
    [[-1, -1, 1.2246468525851679e-16], [-0.8660253882408142, -1, 0.5],
     [-0.8660253882408142, 1, 0.5], [-1, 1, 1.2246468525851679e-16] ],
    [[0, 1, 0], [-1, 1, 1.2246468525851679e-16], [-0.8660253882408142, 1, 0.5] ],
    [[0, -1, 0], [-1, -1, 1.2246468525851679e-16], [-0.8660253882408142, -1, -0.5] ],
    [[-0.8660253882408142, -1, -0.5], [-1, -1, 1.2246468525851679e-16],
     [-1, 1, 1.2246468525851679e-16], [-0.8660253882408142, 1, -0.5] ],
    [[0, 1, 0], [-0.8660253882408142, 1, -0.5], [-1, 1, 1.2246468525851679e-16] ],
    [[0, -1, 0], [-0.8660253882408142, -1, -0.5], [-0.5, -1, -0.8660253882408142] ],
    [[-0.5, -1, -0.8660253882408142], [-0.8660253882408142, -1, -0.5],
     [-0.8660253882408142, 1, -0.5], [-0.5, 1, -0.8660253882408142] ],
    [[0, 1, 0], [-0.5, 1, -0.8660253882408142], [-0.8660253882408142, 1, -0.5] ],
    [[0, -1, 0], [-0.5, -1, -0.8660253882408142], [-1.8369701465288538e-16, -1, -1] ],
    [[-1.8369701465288538e-16, -1, -1], [-0.5, -1, -0.8660253882408142],
     [-0.5, 1, -0.8660253882408142], [-1.8369701465288538e-16, 1, -1] ],
    [[0, 1, 0], [-1.8369701465288538e-16, 1, -1], [-0.5, 1, -0.8660253882408142] ],
    [[0, -1, 0], [-1.8369701465288538e-16, -1, -1], [0.5, -1, -0.8660253882408142] ],
    [[0.5, -1, -0.8660253882408142], [-1.8369701465288538e-16, -1, -1],
     [-1.8369701465288538e-16, 1, -1], [0.5, 1, -0.8660253882408142] ],
    [[0, 1, 0], [0.5, 1, -0.8660253882408142], [-1.8369701465288538e-16, 1, -1] ],
    [[0, -1, 0], [0.5, -1, -0.8660253882408142], [0.8660253882408142, -1, -0.5] ],
    [[0.8660253882408142, -1, -0.5], [0.5, -1, -0.8660253882408142],
     [0.5, 1, -0.8660253882408142], [0.8660253882408142, 1, -0.5] ],
    [[0, 1, 0], [0.8660253882408142, 1, -0.5], [0.5, 1, -0.8660253882408142] ],
    [[0, -1, 0], [0.8660253882408142, -1, -0.5], [1, -1, -2.4492937051703357e-16] ],
    [[1, -1, -2.4492937051703357e-16], [0.8660253882408142, -1, -0.5],
     [0.8660253882408142, 1, -0.5], [1, 1, -2.4492937051703357e-16] ],
    [[0, 1, 0], [1, 1, -2.4492937051703357e-16], [0.8660253882408142, 1, -0.5] ]
  ]

  t.is(pts.length, 36)
  t.true(comparePolygonsAsPoints(pts, exp))
})

test('cylinderElliptic (options)', t => {
  // test start and end
  let obs = cylinderElliptic({start: [0, -5, 0], end: [0, 5, 0]})
  let pts = geom3.toPoints(obs)
  let exp = [
    [ [ 0, -5, 0 ], [ 1, -5, 0 ], [ 0.8660253882408142, -5, 0.5 ] ],
    [ [ 0.8660253882408142, -5, 0.5 ], [ 1, -5, 0 ], [ 1, 5, 0 ], [ 0.8660253882408142, 5, 0.5 ] ],
    [ [ 0, 5, 0 ], [ 0.8660253882408142, 5, 0.5 ], [ 1, 5, 0 ] ],
    [ [ 0, -5, 0 ], [ 0.8660253882408142, -5, 0.5 ], [ 0.5, -5, 0.8660253882408142 ] ],
    [ [ 0.5, -5, 0.8660253882408142 ], [ 0.8660253882408142, -5, 0.5 ], [ 0.8660253882408142, 5, 0.5 ], [ 0.5, 5, 0.8660253882408142 ] ],
    [ [ 0, 5, 0 ], [ 0.5, 5, 0.8660253882408142 ], [ 0.8660253882408142, 5, 0.5 ] ],
    [ [ 0, -5, 0 ], [ 0.5, -5, 0.8660253882408142 ], [ 6.123234262925839e-17, -5, 1 ] ],
    [ [ 6.123234262925839e-17, -5, 1 ], [ 0.5, -5, 0.8660253882408142 ], [ 0.5, 5, 0.8660253882408142 ], [ 6.123234262925839e-17, 5, 1 ] ],
    [ [ 0, 5, 0 ], [ 6.123234262925839e-17, 5, 1 ], [ 0.5, 5, 0.8660253882408142 ] ],
    [ [ 0, -5, 0 ], [ 6.123234262925839e-17, -5, 1 ], [ -0.5, -5, 0.8660253882408142 ] ],
    [ [ -0.5, -5, 0.8660253882408142 ], [ 6.123234262925839e-17, -5, 1 ], [ 6.123234262925839e-17, 5, 1 ], [ -0.5, 5, 0.8660253882408142 ] ],
    [ [ 0, 5, 0 ], [ -0.5, 5, 0.8660253882408142 ], [ 6.123234262925839e-17, 5, 1 ] ],
    [ [ 0, -5, 0 ], [ -0.5, -5, 0.8660253882408142 ], [ -0.8660253882408142, -5, 0.5 ] ],
    [ [ -0.8660253882408142, -5, 0.5 ], [ -0.5, -5, 0.8660253882408142 ], [ -0.5, 5, 0.8660253882408142 ], [ -0.8660253882408142, 5, 0.5 ] ],
    [ [ 0, 5, 0 ], [ -0.8660253882408142, 5, 0.5 ], [ -0.5, 5, 0.8660253882408142 ] ],
    [ [ 0, -5, 0 ], [ -0.8660253882408142, -5, 0.5 ], [ -1, -5, 1.2246468525851679e-16 ] ],
    [ [ -1, -5, 1.2246468525851679e-16 ], [ -0.8660253882408142, -5, 0.5 ], [ -0.8660253882408142, 5, 0.5 ], [ -1, 5, 1.2246468525851679e-16 ] ],
    [ [ 0, 5, 0 ], [ -1, 5, 1.2246468525851679e-16 ], [ -0.8660253882408142, 5, 0.5 ] ],
    [ [ 0, -5, 0 ], [ -1, -5, 1.2246468525851679e-16 ], [ -0.8660253882408142, -5, -0.5 ] ],
    [ [ -0.8660253882408142, -5, -0.5 ], [ -1, -5, 1.2246468525851679e-16 ], [ -1, 5, 1.2246468525851679e-16 ], [ -0.8660253882408142, 5, -0.5 ] ],
    [ [ 0, 5, 0 ], [ -0.8660253882408142, 5, -0.5 ], [ -1, 5, 1.2246468525851679e-16 ] ],
    [ [ 0, -5, 0 ], [ -0.8660253882408142, -5, -0.5 ], [ -0.5, -5, -0.8660253882408142 ] ],
    [ [ -0.5, -5, -0.8660253882408142 ], [ -0.8660253882408142, -5, -0.5 ], [ -0.8660253882408142, 5, -0.5 ], [ -0.5, 5, -0.8660253882408142 ] ],
    [ [ 0, 5, 0 ], [ -0.5, 5, -0.8660253882408142 ], [ -0.8660253882408142, 5, -0.5 ] ],
    [ [ 0, -5, 0 ], [ -0.5, -5, -0.8660253882408142 ], [ -1.8369701465288538e-16, -5, -1 ] ],
    [ [ -1.8369701465288538e-16, -5, -1 ], [ -0.5, -5, -0.8660253882408142 ], [ -0.5, 5, -0.8660253882408142 ], [ -1.8369701465288538e-16, 5, -1 ] ],
    [ [ 0, 5, 0 ], [ -1.8369701465288538e-16, 5, -1 ], [ -0.5, 5, -0.8660253882408142 ] ],
    [ [ 0, -5, 0 ], [ -1.8369701465288538e-16, -5, -1 ], [ 0.5, -5, -0.8660253882408142 ] ],
    [ [ 0.5, -5, -0.8660253882408142 ], [ -1.8369701465288538e-16, -5, -1 ], [ -1.8369701465288538e-16, 5, -1 ], [ 0.5, 5, -0.8660253882408142 ] ],
    [ [ 0, 5, 0 ], [ 0.5, 5, -0.8660253882408142 ], [ -1.8369701465288538e-16, 5, -1 ] ],
    [ [ 0, -5, 0 ], [ 0.5, -5, -0.8660253882408142 ], [ 0.8660253882408142, -5, -0.5 ] ],
    [ [ 0.8660253882408142, -5, -0.5 ], [ 0.5, -5, -0.8660253882408142 ], [ 0.5, 5, -0.8660253882408142 ], [ 0.8660253882408142, 5, -0.5 ] ],
    [ [ 0, 5, 0 ], [ 0.8660253882408142, 5, -0.5 ], [ 0.5, 5, -0.8660253882408142 ] ],
    [ [ 0, -5, 0 ], [ 0.8660253882408142, -5, -0.5 ], [ 1, -5, -2.4492937051703357e-16 ] ],
    [ [ 1, -5, -2.4492937051703357e-16 ], [ 0.8660253882408142, -5, -0.5 ], [ 0.8660253882408142, 5, -0.5 ], [ 1, 5, -2.4492937051703357e-16 ] ],
    [ [ 0, 5, 0 ], [ 1, 5, -2.4492937051703357e-16 ], [ 0.8660253882408142, 5, -0.5 ] ]
  ]

  t.is(pts.length, 36)
  t.true(comparePolygonsAsPoints(pts, exp))

  // test startRadius and endRadius
  obs = cylinderElliptic({startRadius: [1, 2], endRadius: [2, 1]})
  pts = geom3.toPoints(obs)
  exp = [
    [ [ 0, -1, 0 ], [ 1, -1, 0 ], [ 0.8660253882408142, -1, 1 ] ],
    [ [ 1, -1, 0 ], [ 2, 1, 0 ], [ 0.8660253882408142, -1, 1 ] ],
    [ [ 0, 1, 0 ], [ 1.7320507764816284, 1, 0.5 ], [ 2, 1, 0 ] ],
    [ [ 2, 1, 0 ], [ 1.7320507764816284, 1, 0.5 ], [ 0.8660253882408142, -1, 1 ] ],
    [ [ 0, -1, 0 ], [ 0.8660253882408142, -1, 1 ], [ 0.5, -1, 1.7320507764816284 ] ],
    [ [ 0.8660253882408142, -1, 1 ], [ 1.7320507764816284, 1, 0.5 ], [ 0.5, -1, 1.7320507764816284 ] ],
    [ [ 0, 1, 0 ], [ 1, 1, 0.8660253882408142 ], [ 1.7320507764816284, 1, 0.5 ] ],
    [ [ 1.7320507764816284, 1, 0.5 ], [ 1, 1, 0.8660253882408142 ], [ 0.5, -1, 1.7320507764816284 ] ],
    [ [ 0, -1, 0 ], [ 0.5, -1, 1.7320507764816284 ], [ 6.123234262925839e-17, -1, 2 ] ],
    [ [ 0.5, -1, 1.7320507764816284 ], [ 1, 1, 0.8660253882408142 ], [ 6.123234262925839e-17, -1, 2 ] ],
    [ [ 0, 1, 0 ], [ 1.2246468525851679e-16, 1, 1 ], [ 1, 1, 0.8660253882408142 ] ],
    [ [ 1, 1, 0.8660253882408142 ], [ 1.2246468525851679e-16, 1, 1 ], [ 6.123234262925839e-17, -1, 2 ] ],
    [ [ 0, -1, 0 ], [ 6.123234262925839e-17, -1, 2 ], [ -0.5, -1, 1.7320507764816284 ] ],
    [ [ 6.123234262925839e-17, -1, 2 ], [ 1.2246468525851679e-16, 1, 1 ], [ -0.5, -1, 1.7320507764816284 ] ],
    [ [ 0, 1, 0 ], [ -1, 1, 0.8660253882408142 ], [ 1.2246468525851679e-16, 1, 1 ] ],
    [ [ 1.2246468525851679e-16, 1, 1 ], [ -1, 1, 0.8660253882408142 ], [ -0.5, -1, 1.7320507764816284 ] ],
    [ [ 0, -1, 0 ], [ -0.5, -1, 1.7320507764816284 ], [ -0.8660253882408142, -1, 1 ] ],
    [ [ -0.5, -1, 1.7320507764816284 ], [ -1, 1, 0.8660253882408142 ], [ -0.8660253882408142, -1, 1 ] ],
    [ [ 0, 1, 0 ], [ -1.7320507764816284, 1, 0.5 ], [ -1, 1, 0.8660253882408142 ] ],
    [ [ -1, 1, 0.8660253882408142 ], [ -1.7320507764816284, 1, 0.5 ], [ -0.8660253882408142, -1, 1 ] ],
    [ [ 0, -1, 0 ], [ -0.8660253882408142, -1, 1 ], [ -1, -1, 2.4492937051703357e-16 ] ],
    [ [ -0.8660253882408142, -1, 1 ], [ -1.7320507764816284, 1, 0.5 ], [ -1, -1, 2.4492937051703357e-16 ] ],
    [ [ 0, 1, 0 ], [ -2, 1, 1.2246468525851679e-16 ], [ -1.7320507764816284, 1, 0.5 ] ],
    [ [ -1.7320507764816284, 1, 0.5 ], [ -2, 1, 1.2246468525851679e-16 ], [ -1, -1, 2.4492937051703357e-16 ] ],
    [ [ 0, -1, 0 ], [ -1, -1, 2.4492937051703357e-16 ], [ -0.8660253882408142, -1, -1 ] ],
    [ [ -1, -1, 2.4492937051703357e-16 ], [ -2, 1, 1.2246468525851679e-16 ], [ -0.8660253882408142, -1, -1 ] ],
    [ [ 0, 1, 0 ], [ -1.7320507764816284, 1, -0.5 ], [ -2, 1, 1.2246468525851679e-16 ] ],
    [ [ -2, 1, 1.2246468525851679e-16 ], [ -1.7320507764816284, 1, -0.5 ], [ -0.8660253882408142, -1, -1 ] ],
    [ [ 0, -1, 0 ], [ -0.8660253882408142, -1, -1 ], [ -0.5, -1, -1.7320507764816284 ] ],
    [ [ -0.8660253882408142, -1, -1 ], [ -1.7320507764816284, 1, -0.5 ], [ -0.5, -1, -1.7320507764816284 ] ],
    [ [ 0, 1, 0 ], [ -1, 1, -0.8660253882408142 ], [ -1.7320507764816284, 1, -0.5 ] ],
    [ [ -1.7320507764816284, 1, -0.5 ], [ -1, 1, -0.8660253882408142 ], [ -0.5, -1, -1.7320507764816284 ] ],
    [ [ 0, -1, 0 ], [ -0.5, -1, -1.7320507764816284 ], [ -1.8369701465288538e-16, -1, -2 ] ],
    [ [ -0.5, -1, -1.7320507764816284 ], [ -1, 1, -0.8660253882408142 ], [ -1.8369701465288538e-16, -1, -2 ] ],
    [ [ 0, 1, 0 ], [ -3.6739402930577075e-16, 1, -1 ], [ -1, 1, -0.8660253882408142 ] ],
    [ [ -1, 1, -0.8660253882408142 ], [ -3.6739402930577075e-16, 1, -1 ], [ -1.8369701465288538e-16, -1, -2 ] ],
    [ [ 0, -1, 0 ], [ -1.8369701465288538e-16, -1, -2 ], [ 0.5, -1, -1.7320507764816284 ] ],
    [ [ -1.8369701465288538e-16, -1, -2 ], [ -3.6739402930577075e-16, 1, -1 ], [ 0.5, -1, -1.7320507764816284 ] ],
    [ [ 0, 1, 0 ], [ 1, 1, -0.8660253882408142 ], [ -3.6739402930577075e-16, 1, -1 ] ],
    [ [ -3.6739402930577075e-16, 1, -1 ], [ 1, 1, -0.8660253882408142 ], [ 0.5, -1, -1.7320507764816284 ] ],
    [ [ 0, -1, 0 ], [ 0.5, -1, -1.7320507764816284 ], [ 0.8660253882408142, -1, -1 ] ],
    [ [ 0.5, -1, -1.7320507764816284 ], [ 1, 1, -0.8660253882408142 ], [ 0.8660253882408142, -1, -1 ] ],
    [ [ 0, 1, 0 ], [ 1.7320507764816284, 1, -0.5 ], [ 1, 1, -0.8660253882408142 ] ],
    [ [ 1, 1, -0.8660253882408142 ], [ 1.7320507764816284, 1, -0.5 ], [ 0.8660253882408142, -1, -1 ] ],
    [ [ 0, -1, 0 ], [ 0.8660253882408142, -1, -1 ], [ 1, -1, -4.898587410340671e-16 ] ],
    [ [ 0.8660253882408142, -1, -1 ], [ 1.7320507764816284, 1, -0.5 ], [ 1, -1, -4.898587410340671e-16 ] ],
    [ [ 0, 1, 0 ], [ 2, 1, -2.4492937051703357e-16 ], [ 1.7320507764816284, 1, -0.5 ] ],
    [ [ 1.7320507764816284, 1, -0.5 ], [ 2, 1, -2.4492937051703357e-16 ], [ 1, -1, -4.898587410340671e-16 ] ]
  ]

  t.is(pts.length, 48)
  t.true(comparePolygonsAsPoints(pts, exp))

  // test segments
  obs = cylinderElliptic({segments: 8})
  pts = geom3.toPoints(obs)

  t.is(pts.length, 24)
})
